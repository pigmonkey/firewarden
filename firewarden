#!/bin/bash
#
# Open a program within a private Firejail sandbox.
#
# If the final argument is a local file, the file will be copied into a
# temporary directory. This directory will be used by Firejail as the user
# home. After the program has closed, the temporary directory and all of its
# contents are deleted. By default, networking is disabled and a private /dev
# is created when viewing a local file.
#
###############################################################################

usage() {
    echo "Usage: firewarden [OPTION...] [PROGRAM] [PROGRAM ARGS...]
Open a program within a private Firejail sandbox.

If the final argument is a local file, networking is disabled and a private
/dev is created by default.

For improved isolation when networking is enabled, the sandbox may be launched
with a new network namespace and a restrictive netfilter. Unless otherwise
specified, the first connected interface (as reported by NetworkManager) will
be used.

Options:
    -c      execute config script
    -n      deny network access (implied when viewing local files)
    -N      allow network access (implied when viewing URLs)
    -i      isolate network with new namespace and restrictive filter
            using first connected interface (implies -N)
    -I      isolate network with new namespace and restrictive filter
            using specified interface (implies -N)
    -d      create a new /dev directory (implied when viewing local files)
    -D      do not create a new /dev directory (implied when viewing URLs)
    -O      do not create a new /opt directory
    -q      tell firejail to be quiet"
}

netisolate() {
    # If requested, isolate the network.
    if [[ -n "$isolate_network" ]]; then
        # If an interface wasn't specified, get the first connected device.
        if [[ -z "$interface" ]]; then
            interface=$(nmcli d | grep -m 1 connected | cut -d ' ' -f 1)
        fi
        netopt="--net=$interface --netfilter"
    fi
}

process_opts() {
    # When viewing a local file, disable network access and create private /dev
    # unless otherwise specified.
    if [ -n "$file_name" ]; then
        netopt="--net=none"
        devopt="--private-dev"
        if [[ -n "$enable_network" ]]; then
            netopt=""
            netisolate
        fi
        if [ "$private_dev" = false ]; then
            devopt=""
        fi
    # Otherwise, enable network access and do not create a private /dev unless
    # otherwise specified.
    else
        if [[ -n "$disable_network" ]]; then
            netopt="--net=none"
        else
            netisolate
        fi
        if [ "$private_dev" = true ]; then
            devopt="--private-dev"
        fi
    fi
    optopt="--private-opt=firewarden-$now"
    if [ "$private_opt" = false ]; then
        optopt=""
    fi
    # Always use a private home directory.
    build_dir
    homeopt="--private=$dir"
}

app_opts() {
    case $app in
        # If the application is Chromium or Google Chrome, prevent the first run
        # greeting, disable the default browser check, and prevent WebRTC IP leak.
        "chromium"|"google-chrome"|"brave")
            appopt=("--no-first-run" "--no-default-browser-check" "--enforce-webrtc-ip-permission-check")
            ;;
        # If the application is Qutebrowser, place the basedir within the
        # temporary home to prevent session-sharing attempts.
        "qutebrowser")
            appopt=("--basedir" "$dir/basedir")
            ;;
    esac
}

build_dir() {
    # Build a temporary directory to function as the sandbox home.
    if [ -n "$XDG_RUNTIME_DIR" ]; then
        dir=$XDG_RUNTIME_DIR/firewarden/$now
    else
        dir=/tmp/$USER/firewarden/$now
    fi
    mkdir -p "$dir"
    # If a local file was specified, copy it into the sandbox home.
    if [ -n "$file_path" ]; then
        cp "$file_path" "$dir"
    fi
}

file_check() {
    # If the last remaining argument is a local file, get it's full path and file
    # name.
    file_path=$(readlink -e "$last")
    if [ $? -eq 0 ]; then
        file_name=$(basename "$file_path")
    fi
}

execute() {
    /usr/bin/firejail --disable-mnt --private-srv=firewarden-"$now" $optopt $quiet $homeopt $netopt $devopt "$app" "${appopt[@]}" "${finalargs[@]}"
}

cleanup() {
    # Recursevily remove the temporary directory and all of its contents.
    if [ -n "$dir" ]; then
        rm -fr "$dir"
    fi
}

while getopts "cI:idDnNOqh" opt; do
    case $opt in
        c)
            use_config=true
            ;;
        n)
            disable_network=true
            ;;
        N)
            enable_network=true
            ;;
        i)
            enable_network=true
            isolate_network=true
            ;;
        I)
            enable_network=true
            isolate_network=true
            interface=$OPTARG
            ;;
        d)
            private_dev=true
            ;;
        D)
            private_dev=false
            ;;
        O)
            private_opt=false
            ;;
        q)
            quiet="--quiet"
            ;;
        h)
            usage
            exit
            ;;
        :)
            echo "Option -$OPTARG requires an argument.
            "
            usage
            exit
            ;;
    esac
done

# Get the current timestamp.
now=$(date --iso-8601=s)

# Check if the last argument is a local file.
last=${*: -1}
file_check

# Process the given options.
process_opts

# Remove the processed options from the arguments.
shift "$((OPTIND - 1))"

# The application is now the first argument.
app=$1

# Pop the app out of the remaining arguments.
shift

# Add the appropriate options for the application.
app_opts

# If the last argument was a local file, rebuild final args.
finalargs=( "$@" )
if [ -n "$file_name" ] && [ $# -gt 0 ]; then
    arg_length=$(($#-1))
    args=( ${@:1:$arg_length} )
    if [ ${#args[@]} -eq 0 ]; then
        finalargs=( "$file_name" )
    else
        finalargs=( "${args[@]}" "$file_name" )
    fi
fi

if [ -n "$use_config" ]; then
    app_basename=$(basename "$app")
    if [ -n "$XDG_CONFIG_HOME" ] && [ -r "$XDG_CONFIG_HOME/firewarden/$app_basename.sh" ]; then
        FIREWARDEN_HOME=$dir FIREWARDEN_FILE=$file_name "$XDG_CONFIG_HOME/firewarden/$app_basename.sh"
    elif [ -n "$HOME" ] && [ -r "$HOME/.config/firewarden/$app_basename.sh" ]; then
        FIREWARDEN_HOME=$dir FIREWARDEN_FILE=$file_name "$HOME/.config/firewarden/$app_basename.sh"
    fi
fi

execute
cleanup
